[{"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/index.js":"1","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/App.js":"2","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/coinGeckoAPI/coinGeckoData.js":"3","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/pagination/Pagination.js":"4","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/search/Search.js":"5","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/signup/Signup.js":"6","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/login/Login.js":"7","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/useToken.js":"8","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/MyWatchlist/MyWatchlist.js":"9","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/myWatchlist/MyWatchlist.js":"10","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/myCollection/MyCollection.js":"11"},{"size":464,"mtime":1608926693434,"results":"12","hashOfConfig":"13"},{"size":6143,"mtime":1613586796427,"results":"14","hashOfConfig":"13"},{"size":4229,"mtime":1613581836091,"results":"15","hashOfConfig":"13"},{"size":716,"mtime":1613076484241,"results":"16","hashOfConfig":"13"},{"size":6050,"mtime":1613585667367,"results":"17","hashOfConfig":"13"},{"size":3414,"mtime":1613502923631,"results":"18","hashOfConfig":"13"},{"size":4310,"mtime":1613582625964,"results":"19","hashOfConfig":"13"},{"size":600,"mtime":1613106780687,"results":"20","hashOfConfig":"13"},{"size":125,"mtime":1613105225504,"results":"21","hashOfConfig":"13"},{"size":125,"mtime":1613105225504,"results":"22","hashOfConfig":"13"},{"size":130,"mtime":1613105357971,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"pv58m6",{"filePath":"27","messages":"28","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/index.js",[],["51","52"],"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/App.js",["53","54","55","56","57","58","59"],"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/coinGeckoAPI/coinGeckoData.js",["60","61","62"],"import { useState, useEffect } from \"react\";\nimport \"./coinGeckoData.css\";\nimport Search from '../search/Search'\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\n\n\n\nconst CoinGeckoApi = ({coinResults, loading, setCoinResults, searchValue,setSearchValue, allCoinINS, setSearchedCoins, searchedCoins, coinsPerPage, pageNumber}) => {\n    if (loading){\n        return <div className=\"loader\">Loading...</div>\n    }\n\n    //=============================================================================================================//\n    //=============================================================================================================//\n\n    const currencyObj = {\n        style: \"currency\",\n        currency: \"usd\",\n        // currencyDisplay: 'code'\n    }\n\nconsole.log(coinResults)\nconsole.log(searchedCoins)\nconsole.log(searchValue)\n// console.log(searchValue.length)\n\n//=============================================================================================================//\n//=============================================================================================================//\n// setCoinResults(coinResults)\n    return (\n\n\n        \n        <div>\n\n            {/* <nav className=\"router__tabs\"> */}\n                {/* <div className=\"my__collection__tab\">\n                    My Collection\n                </div>\n                <div  className=\"my__watchlist__tab\">\n                    My Watchlist\n                </div>\n             */}\n            <Search \n                coinResults={coinResults}\n                setSearchValue={setSearchValue}\n                searchValue={searchValue}\n                allCoinINS={allCoinINS}\n                setCoinResults={setCoinResults}\n                setSearchedCoins={setSearchedCoins}\n                searchedCoins={searchedCoins}\n                />\n            {/* </nav> */}\n             {/* </div> */}\n\n            {searchValue.length === 0 ?        \n                \n                \n                <div className=\"coin__info\">\n            {/* <div>  \n            <div> */}\n            {/* <div className=\"search__length\"> showing Top {coinsPerPage} of Page {pageNumber} </div>  */}\n                    {coinResults.map((coinInfo) => (\n                    <div \n                    key={coinInfo.id} \n                    className=\"coin__card\"        \n                    >\n                        {/* <div className=\"favorite__icon\"> {FavoriteBorderIcon}</div> */}\n                        <div className=\"card__rank\">{\"_\"}Rank: #{coinInfo.market_data.market_cap_rank} {<br/>} <strong> ( {coinInfo.symbol.toUpperCase()} )</strong> </div>\n                        <div className=\"card__marketcap\"> MCap: {coinInfo.market_data.market_cap.usd.toLocaleString(\"en-US\",currencyObj)}</div>\n                        <div className=\"card__circulating__supply\">Circulating Supply:{<br/>} {Number(coinInfo.market_data.circulating_supply).toLocaleString(\"en-US\")} <strong> {coinInfo.symbol.toUpperCase()}</strong></div>\n                        \n                        {/* <div className=\"card__marketcap\">MCap: {coinInfo.market_data.market_cap.usd.toLocaleString(\"en-US\",currencyObj)}</div> */}\n                        <img className=\"card__image\" src={coinInfo.image.large} alt={coinInfo.name}/>\n                        <div className=\"card__name\">{coinInfo.name}</div>\n                        <div className=\"current__price\">  Price</div>\n                            <div className=\"card__price\"> USD:  {\"  \"}{coinInfo.market_data.current_price.usd.toLocaleString(\"en-US\",currencyObj)} \n                            <hr/> \n                            BTC: ₿{coinInfo.market_data.current_price.btc}\n                            <hr/> \n                            ETH: {coinInfo.market_data.current_price.eth}\n                            <hr/>    \n                            </div>      \n                    \n                    \n                    </div>\n                    \n\n                    \n                    ))}\n                </div>\n                    :\n                    \n                    <div>\n        \n\n            </div>\n\n/* </div> */\n\n            }   \n            </div>\n\n    )\n\n}\n\nexport default CoinGeckoApi;\n","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/pagination/Pagination.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/search/Search.js",["63","64","65","66","67","68","69","70","71","72","73"],"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/signup/Signup.js",["74","75"],"import {useState} from 'react'\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\n const Signup = () => {\n  const [open, setOpen] = useState(false);\n\n  //=============================================================================================================//\n  //=============================================================================================================//\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  //=============================================================================================================//\n  //=============================================================================================================//\n\n//   return (\n//     <div>\n//       <nav className=\"header__navigator\">\n//         <div className=\"registration__buttons\">\n//           <a className=\"login__button\" href={handleClickOpen}>Login</a>\n//           <a className=\"signup__button\">Register</a>\n//         </div>\n//       </nav>\n\n//       <Dialog\n//         open={open}\n//         onClose={handleClose}\n//         aria-labelledby=\"form-dialog-title\"\n//       ></Dialog>\n//     </div>\n//   );\n\n\n\n\nreturn (\n    <div>\n\n        <span className=\"signup__button\" onClick={handleClickOpen}>Sign up</span>\n\n      <Dialog open={open} onClose={handleClose}  fullWidth='true' maxWidth='xs' aria-labelledby=\"form-dialog-title\">\n        \n        <DialogContent>\n          <DialogTitle id=\"form-dialog-title\"><h1> Sign Up <br/> Create an Account</h1></DialogTitle>\n          <DialogContentText>\n          <h3>Already have an account? <a href=\"\">Log In here.</a></h3>\n\n          </DialogContentText>\n          <hr/>\n          <TextField\n            // autoFocus\n            // size='normal'\n            variant='outlined'\n            margin=\"dense\"\n            id=\"username\"\n            label=\"Username\"\n            type=\"email\"\n            fullWidth\n          />\n\n          {/* <hr/> */}\n          <TextField\n\n            // size='normal'\n            variant='outlined'\n            margin=\"dense\"\n            id=\"email\"\n            label=\"Email Address\"\n            type=\"email\"\n            fullWidth\n          />\n                 <br/>\n          <TextField\n            // size='normal'\n            variant='outlined'\n            margin=\"dense\"\n            id=\"password\"\n            label=\"Password\"\n            type=\"email\"\n            fullWidth\n          />\n                 <hr/>\n        </DialogContent>\n        <hr/>\n      <hr/>\n      <hr/>\n      <hr/>\n      {/* <hr/> */}\n        <DialogActions>\n          <button  style={{backgroundColor: 'gold', fontSize:'15px', borderRadius:'7px', padding: '10px'}} onClick={handleClose} >\n           {'<<<< ❌ Sign up Later'}\n          </button>\n          <button style={{backgroundColor: 'gold',  fontSize:'15px', borderRadius:'7px', padding: '10px'}} onClick={handleClose} >\n            Create Account ➕\n          </button>\n        </DialogActions>\n      <hr/>\n      <hr/>\n      <hr/>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default Signup;","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/login/Login.js",["76","77","78"],"import {useState} from 'react'\nimport PropTypes from 'prop-types';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\n\n\n//=============================================================================================================//\n//=============================================================================================================//\n\nasync function loginUser(credentials) {\n  return fetch('http://localhost:8080/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  })\n    .then(data => data.json())\n }\n\n//=============================================================================================================//\n//=============================================================================================================//\n\n\n\n const Login = ({setToken}) => {\n  const [open, setOpen] = useState(false);\n  const [username, setUserName] = useState();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n\n  //=============================================================================================================//\n  //=============================================================================================================//\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  //=============================================================================================================//\n  //=============================================================================================================//\n\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const token = await loginUser({\n      username,\n      password\n    });\n    setToken(token);\n  }\n//=============================================================================================================//\n//=============================================================================================================//\n\nreturn (\n    <div>\n\n    <span className=\"login__button\" onClick={handleClickOpen}>Login</span>\n \n      <Dialog open={open} onClose={handleClose}  fullWidth='true' maxWidth='xs' aria-labelledby=\"form-dialog-title\">\n\n\n        <DialogContent>\n          <DialogTitle id=\"form-dialog-title\"> <h1>Log In</h1></DialogTitle>\n          <DialogContentText>\n            <h3>New to Crypto Collection? <a href=\"\">Create an Account here.</a></h3>\n\n          </DialogContentText>\n          <hr/>\n          <TextField\n            variant='outlined'\n            margin=\"dense\"\n            id=\"username\"\n            label=\"Username\"\n            type=\"email\"\n            fullWidth\n            onChange={e => setUserName(e.target.value)}\n          />\n\n          <hr/>\n          <TextField\n            variant='outlined'\n            margin=\"dense\"\n            id=\"email\"\n            label=\"Email Address\"\n            type=\"email\"\n            fullWidth\n            onChange={e => setEmail(e.target.value)}\n          />\n          <hr/>\n          <TextField\n            variant='outlined'\n            margin=\"dense\"\n            id=\"password\"\n            label=\"Password\"\n            type=\"email\"\n            fullWidth\n            onChange={e => setPassword(e.target.value)}\n          />\n            <hr/>\n        </DialogContent> \n        <hr/>\n      <hr/>\n      <hr/>\n        <DialogActions>\n          <button  style={{backgroundColor: 'gold', fontSize:'15px', borderRadius:'7px', padding: '10px'}} onClick={handleClose} >\n          ❌ Cancel\n          </button>\n          <button style={{backgroundColor: 'gold',  fontSize:'15px', borderRadius:'7px', padding: '10px'}} \n            onClick={handleSubmit} >\n           Login 🔑 🚪\n          </button>\n        </DialogActions>\n      <hr/>\n      <hr/>\n      <hr/>\n      <hr/>\n      <hr/>\n      </Dialog>\n    </div>\n    // </div>\n  );\n};\n\n\nLogin.propTypes = {\n  setToken: PropTypes.func.isRequired\n}\n\n\n\n\nexport default Login;","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/useToken.js",["79"],"import { useState } from 'react';\n\nconst useToken =()=> {\n    const getToken = () => {\n        const tokenString = localStorage.getItem('token');\n        const userToken = JSON.parse(tokenString);\n        return userToken?.token\n    };\n\n    const [token, setToken] = useState(getToken());\n\n    const saveToken = userToken => {\n        localStorage.setItem('token', JSON.stringify(userToken));\n        setToken(userToken.token);\n    };\n\n    const removeToken = ()=>{\n        localStorage.removeItem(token)\n    }\n\n    return {\n        setToken: saveToken,\n        token\n    }\n}\nexport default useToken;","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/MyWatchlist/MyWatchlist.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/myWatchlist/MyWatchlist.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/myCollection/MyCollection.js",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":6,"column":8,"nodeType":"86","messageId":"87","endLine":6,"endColumn":14},{"ruleId":"84","severity":1,"message":"88","line":30,"column":22,"nodeType":"86","messageId":"87","endLine":30,"endColumn":35},{"ruleId":"84","severity":1,"message":"89","line":31,"column":24,"nodeType":"86","messageId":"87","endLine":31,"endColumn":39},{"ruleId":"84","severity":1,"message":"90","line":33,"column":10,"nodeType":"86","messageId":"87","endLine":33,"endColumn":22},{"ruleId":"84","severity":1,"message":"91","line":33,"column":24,"nodeType":"86","messageId":"87","endLine":33,"endColumn":39},{"ruleId":"92","severity":1,"message":"93","line":56,"column":4,"nodeType":"94","endLine":56,"endColumn":6,"suggestions":"95"},{"ruleId":"96","severity":1,"message":"97","line":71,"column":31,"nodeType":"98","messageId":"99","endLine":71,"endColumn":33},{"ruleId":"84","severity":1,"message":"100","line":1,"column":10,"nodeType":"86","messageId":"87","endLine":1,"endColumn":18},{"ruleId":"84","severity":1,"message":"101","line":1,"column":20,"nodeType":"86","messageId":"87","endLine":1,"endColumn":29},{"ruleId":"84","severity":1,"message":"102","line":4,"column":8,"nodeType":"86","messageId":"87","endLine":4,"endColumn":26},{"ruleId":"84","severity":1,"message":"101","line":1,"column":9,"nodeType":"86","messageId":"87","endLine":1,"endColumn":18},{"ruleId":"84","severity":1,"message":"100","line":1,"column":20,"nodeType":"86","messageId":"87","endLine":1,"endColumn":28},{"ruleId":"84","severity":1,"message":"103","line":3,"column":8,"nodeType":"86","messageId":"87","endLine":3,"endColumn":20},{"ruleId":"84","severity":1,"message":"104","line":16,"column":7,"nodeType":"86","messageId":"87","endLine":16,"endColumn":15},{"ruleId":"84","severity":1,"message":"105","line":17,"column":7,"nodeType":"86","messageId":"87","endLine":17,"endColumn":17},{"ruleId":"106","severity":1,"message":"107","line":19,"column":1,"nodeType":"108","messageId":"109","endLine":19,"endColumn":117},{"ruleId":"106","severity":1,"message":"107","line":20,"column":1,"nodeType":"108","messageId":"109","endLine":20,"endColumn":117},{"ruleId":"96","severity":1,"message":"97","line":33,"column":30,"nodeType":"98","messageId":"99","endLine":33,"endColumn":32},{"ruleId":"106","severity":1,"message":"107","line":41,"column":1,"nodeType":"108","messageId":"109","endLine":41,"endColumn":117},{"ruleId":"106","severity":1,"message":"107","line":42,"column":1,"nodeType":"108","messageId":"109","endLine":42,"endColumn":117},{"ruleId":"96","severity":1,"message":"110","line":55,"column":30,"nodeType":"98","messageId":"111","endLine":55,"endColumn":32},{"ruleId":"84","severity":1,"message":"112","line":2,"column":8,"nodeType":"86","messageId":"87","endLine":2,"endColumn":14},{"ruleId":"113","severity":1,"message":"114","line":58,"column":40,"nodeType":"115","endLine":58,"endColumn":51},{"ruleId":"84","severity":1,"message":"112","line":4,"column":8,"nodeType":"86","messageId":"87","endLine":4,"endColumn":14},{"ruleId":"84","severity":1,"message":"116","line":37,"column":10,"nodeType":"86","messageId":"87","endLine":37,"endColumn":15},{"ruleId":"113","severity":1,"message":"114","line":77,"column":43,"nodeType":"115","endLine":77,"endColumn":54},{"ruleId":"84","severity":1,"message":"117","line":17,"column":11,"nodeType":"86","messageId":"87","endLine":17,"endColumn":22},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"no-unused-vars","'Search' is defined but never used.","Identifier","unusedVar","'setPageNumber' is assigned a value but never used.","'setCoinsPerPage' is assigned a value but never used.","'currencyType' is assigned a value but never used.","'setCurrencyType' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'coinResults' and 'getCryptoData'. Either include them or remove the dependency array.","ArrayExpression",["120"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useState' is defined but never used.","'useEffect' is defined but never used.","'FavoriteBorderIcon' is defined but never used.","'CoinGeckoApi' is defined but never used.","'nameData' is assigned a value but never used.","'symbolData' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'Button' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'email' is assigned a value but never used.","'removeToken' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},"Update the dependencies array to be: [coinResults, getCryptoData]",{"range":"123","text":"124"},[1907,1909],"[coinResults, getCryptoData]"]