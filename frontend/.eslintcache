[{"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/index.js":"1","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/App.js":"2","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/coinGeckoAPI/coinGeckoData.js":"3","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/pagination/Pagination.js":"4","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/search/Search.js":"5","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/signup/Signup.js":"6","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/login/Login.js":"7","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/MyWatchlist/MyWatchlist.js":"8","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/myWatchlist/MyWatchlist.js":"9","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/myCollection/MyCollection.js":"10","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/navbar/Navbar.js":"11","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/shop/Shop.js":"12"},{"size":464,"mtime":1608926693434,"results":"13","hashOfConfig":"14"},{"size":4004,"mtime":1613690395258,"results":"15","hashOfConfig":"14"},{"size":4246,"mtime":1613675866310,"results":"16","hashOfConfig":"14"},{"size":716,"mtime":1613076484241,"results":"17","hashOfConfig":"14"},{"size":6056,"mtime":1613675636809,"results":"18","hashOfConfig":"14"},{"size":3741,"mtime":1614008185632,"results":"19","hashOfConfig":"14"},{"size":4829,"mtime":1614011999215,"results":"20","hashOfConfig":"14"},{"size":125,"mtime":1613105225504,"results":"21","hashOfConfig":"14"},{"size":159,"mtime":1613689611310,"results":"22","hashOfConfig":"14"},{"size":164,"mtime":1613689541904,"results":"23","hashOfConfig":"14"},{"size":1600,"mtime":1613751316778,"results":"24","hashOfConfig":"14"},{"size":169,"mtime":1613690318401,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"pv58m6",{"filePath":"29","messages":"30","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/index.js",[],["57","58"],"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/App.js",["59","60","61","62","63","64","65","66","67","68","69"],"\nimport {useState, useEffect} from 'react'\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\nimport CoinGeckoApi from './components/coinGeckoAPI/coinGeckoData'\nimport Navbar from './components/navbar/Navbar'\nimport Search from './components/search/Search'\nimport Pagination from './components/pagination/Pagination';\nimport Signup from './components/signup/Signup'\nimport Login from './components/login/Login'\nimport MyCollection from './components/myCollection/MyCollection';\nimport MyWatchlist from './components/myWatchlist/MyWatchlist';\nimport Shop from './components/shop/Shop'\n\n\nconst CoinGecko = require('coingecko-api');\n\n\n\n\n//=============================================================================================================//\n//=============================================================================================================//\nconst CoinGeckoClient = new CoinGecko();\n\n\n\nfunction App() {\n\n  const [loading, setLoading] = useState(false);\n  const [coinResults, setCoinResults] = useState([]);\n  const [searchValue, setSearchValue] = useState('');\n  const [pageNumber, setPageNumber] = useState(1);\n  const [coinsPerPage, setCoinsPerPage] = useState(100)\n  const [allCoinINS, setAllCoinINS] = useState([])\n  const [currencyType, setCurrencyType] = useState('usd')\n  const [searchedCoins, setSearchedCoins] = useState([])\n\n  // const { token, setToken } = useToken();\n\n\n\n//=============================================================================================================//\n//=============================================================================================================//\nuseEffect(()=>{\n\n  getCryptoData()\n\n\n  // console.log(coinResults)\n}, [])  \n\n\nconst getCryptoData = async(pageNumber) => {\n  setLoading(true);\n  \n  //allows maximum 250 assets per use\n  let data = await CoinGeckoClient.coins.all({per_page: coinsPerPage, page: pageNumber});\n\n  //get all coin id's to use as search reference of available coins in database\n  //gets all id's, name and symbols of all coins\n  let allCoinsINS = await CoinGeckoClient.coins.list()\n\n  let coinCardIds =[]\n\n  allCoinsINS.data.map((value)=>{\n    // console.log(value.id)\n    coinCardIds.push(value.id)\n    \n  })\n\n  setCoinResults(data.data)\n  setAllCoinINS(allCoinsINS.data)\n\n  setLoading(false)\n\n};\n\n\n\n//=============================================================================================================//\n//=============================================================================================================//\n\n//Change page\nconst paginate = async (pageNumber)=>{\n  getCryptoData(pageNumber)\n\n\n}\n//=============================================================================================================//\n//=============================================================================================================//\n\n  return (\n    // <div>\n\n\n\n  \n\n\n\n\n      \n\n\n\n   <Router> \n\n\n\n        <Navbar/>\n\n        <Route path=\"/collection\" >\n            <MyCollection />\n          </Route>\n\n          <Route path=\"/watchlist\">\n            <MyWatchlist />\n          </Route>\n\n          <Route path=\"/shop\">\n            <Shop />\n          </Route>\n\n\n\n          <Route path=\"/\"> \n            <CoinGeckoApi \n              coinResults={coinResults} \n              loading={loading} \n              setSearchValue={setSearchValue}\n              searchValue={searchValue}\n              allCoinINS={allCoinINS}\n              setCoinResults={setCoinResults}\n              setSearchedCoins={setSearchedCoins}\n              searchedCoins={searchedCoins}\n              coinsPerPage={coinsPerPage}\n              pageNumber={pageNumber}\n            />\n\n            <Pagination \n              coinsPerPage={coinsPerPage} \n              totalCoins={allCoinINS.length} \n              paginate={paginate}\n              pageNumber={pageNumber}\n            />\n          </Route>\n         \n\n          \n\n      </Router>\n\n  \n  );\n}\n\nexport default App;\n","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/coinGeckoAPI/coinGeckoData.js",["70","71","72"],"import { useState, useEffect } from \"react\";\nimport \"./coinGeckoData.css\";\nimport Search from '../search/Search'\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\n\n\n\nconst CoinGeckoApi = ({coinResults, loading, setCoinResults, searchValue,setSearchValue, allCoinINS, setSearchedCoins, searchedCoins, coinsPerPage, pageNumber}) => {\n    if (loading){\n        return <div className=\"loader\">Loading...</div>\n    }\n\n    //=============================================================================================================//\n    //=============================================================================================================//\n\n    const currencyObj = {\n        style: \"currency\",\n        currency: \"usd\",\n        // currencyDisplay: 'code'\n    }\n\n// console.log(coinResults)\n// console.log(searchedCoins)\n// console.log(searchValue)\n// console.log(searchValue.length)\n\n//=============================================================================================================//\n//=============================================================================================================//\n// setCoinResults(coinResults)\n    return (\n\n\n        \n        <div>\n\n            {/* <nav className=\"router__tabs\"> */}\n                {/* <div className=\"my__collection__tab\">\n                    My Collection\n                </div>\n                <div  className=\"my__watchlist__tab\">\n                    My Watchlist\n                </div>\n             */}\n            <Search \n                coinResults={coinResults}\n                setSearchValue={setSearchValue}\n                searchValue={searchValue}\n                allCoinINS={allCoinINS}\n                setCoinResults={setCoinResults}\n                setSearchedCoins={setSearchedCoins}\n                searchedCoins={searchedCoins}\n                />\n            {/* </nav> */}\n             {/* </div> */}\n\n            {searchValue.length === 0 ?        \n                \n                \n                <div className=\"coin__info\">\n            {/* <div>  \n            <div> */}\n            {/* <div className=\"search__length\"> showing Top {coinsPerPage} of Page {pageNumber} </div>  */}\n                    {coinResults.map((coinInfo) => (\n                    <div \n                    key={coinInfo.id} \n                    className=\"coin__card\"        \n                    >\n                        {/* <div className=\"favorite__icon\"> {FavoriteBorderIcon}</div> */}\n                        <div className=\"card__rank\">{\"_\"}Rank: #{coinInfo.market_data.market_cap_rank} {<br/>} <strong> ( {coinInfo.symbol.toUpperCase()} )</strong> </div>\n                        <div className=\"card__marketcap\"> MCap: {coinInfo.market_data.market_cap.usd.toLocaleString(\"en-US\",currencyObj)}</div>\n                        <div className=\"card__circulating__supply\">Circulating Supply:{<br/>} {Number(coinInfo.market_data.circulating_supply).toLocaleString(\"en-US\")} <strong> {coinInfo.symbol.toUpperCase()}</strong></div>\n                        \n                        {/* <div className=\"card__marketcap\">MCap: {coinInfo.market_data.market_cap.usd.toLocaleString(\"en-US\",currencyObj)}</div> */}\n                        <img className=\"card__image\" src={coinInfo.image.large} alt={coinInfo.name}/>\n                        <div className=\"card__name\">{coinInfo.name}</div>\n                        <div className=\"current__price\">  Price</div>\n                            <div className=\"card__price\"> USD:  {\"  \"}{coinInfo.market_data.current_price.usd.toLocaleString(\"en-US\",currencyObj)} \n                            <hr/> \n                            BTC: ₿{coinInfo.market_data.current_price.btc}\n                            <hr/> \n                            ETH: {coinInfo.market_data.current_price.eth}\n                            {/* <hr/>     */}\n                            </div>      \n                    \n                    \n                    </div>\n                    \n\n                    \n                    ))}\n                </div>\n                    :\n                    \n                    <div>\n        \n\n            </div>\n\n/* </div> */\n\n            }   \n            </div>\n\n    )\n\n}\n\nexport default CoinGeckoApi;\n","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/pagination/Pagination.js",[],["73","74"],"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/search/Search.js",["75","76","77","78","79","80","81","82","83","84","85"],"import {useEffect, useState} from 'react'\nimport './Search.css'\nimport CoinGeckoApi from '../coinGeckoAPI/coinGeckoData'\nconst CoinGecko = require('coingecko-api');\n\n\n\n\n\n\n// func()\nconst Search =  ({ searchValue, setSearchValue, setCoinResults, coinResults, loading, allCoinINS, currencyType, setCurrencyType, setSearchedCoins, searchedCoins}) => {\n\n\nconst idData = []\nconst nameData = []\nconst symbolData = []\n\n{/* =============================================================================================================*/}\n{/* =============================================================================================================*/}\n  \n\n\n    const handleSearchInput =  async(inputValue)=>{\n    \n\n      setSearchValue(inputValue)\n      // setCoinResults(coinResults)\n      // console.log(inputValue)\n\n\n      // const getEach =\n        allCoinINS.map(value =>{\n    \n        idData.push(value.id)\n        // nameData.push(value.name)\n        // symbolData.push(value.symbol)\n        \n\n        })\n{/* =============================================================================================================*/}\n{/* =============================================================================================================*/}\n  \n\n        const filteredSearch = idData.filter(value => value.includes(inputValue))\n        // console.log(filteredSearch)\n        const CoinGeckoClient = new CoinGecko();\n\n        let market =  await CoinGeckoClient.coins.markets({ vs_currency: currencyType, ids: filteredSearch})\n        // console.log(market)\n\n        \n        const filteredSearchArray =[]\n        \n      market.data.map((value)=>{\n\n        if(value.market_cap === null){\n          let acceptedCoin = value\n          \n    \n          return acceptedCoin\n\n        }\n\n            \n            let coinCard = {\n              id: value.id,\n              name: value.name,\n              symbol: value.symbol,\n              market_cap_rank:value.market_cap_rank,\n              market_cap: value.market_cap,\n              circulating_supply: value.circulating_supply,\n              image: value.image,\n              current_price: value.current_price\n\n            }\n            \n            \n            filteredSearchArray.push(coinCard)\n\n          \n        })\n        // console.log(filteredSearchArray)\n        setSearchedCoins(filteredSearchArray)\n        // setCoinResults(filteredSearchArray)\n        \n      }\n  \n    //  setCoinResults(coinResults)\n      //  console.log(acceptedCoin)\n      // }\n      // )/\n\n\n    \n\n      const searchBar = \n      // <div className=\"search__element\">\n      <nav className=\"search__element\">\n\n      <input \n          className=\"search__input\"\n          type=\"text\"\n          placeholder=\" Search Cryptocurrencies\"\n          value={searchValue}\n          onChange={(e)=> handleSearchInput(e.target.value)}\n          />\n      {/* <button \n        className=\"search__button\"\n        // onClick={handleSearchButton}\n        >Search\n      </button>     */}\n      {/* // </div> */}\n\n </nav>\n    \n\n    const currencyObj = {\n      style: \"currency\",\n      currency: \"usd\",\n      // currencyDisplay: 'code'\n  }\n\n        const searchIdentifiers =  \n        \n\n        <div className=\"coin__info\">\n\n        {searchedCoins.filter(coinInfo =>\n\n          coinInfo.id.includes(searchValue) ||\n            coinInfo.id.toUpperCase().includes(searchValue)\n          || \n          coinInfo.symbol.includes(searchValue) || coinInfo.symbol.toUpperCase().includes(searchValue)\n          ||\n          coinInfo.name.includes(searchValue) || coinInfo.name.toUpperCase().includes(searchValue))\n          .map(filteredCoin=>(\n            <div \n            key={filteredCoin.id} \n            className=\"coin__card\"        \n        >\n            {/* <div className=\"card__rank\">Rank: #{filteredCoin.market_data.market_cap_rank} {<br/>}( {filteredCoin.symbol.toUpperCase()} ) </div>\n            <div className=\"card__marketcap\">{filteredCoin.market_data.market_cap.usd.toLocaleString(\"en-US\")}</div>\n            <img className=\"card__image\" src={filteredCoin.image.large} alt={filteredCoin.name}/>\n            <div className=\"card__name\">{filteredCoin.name}</div>\n            <div className=\"card__price\"> ${filteredCoin.market_data.current_price.usd}</div> */}\n\n                    <div className=\"card__rank\">{\"_ \"}Rank: #{filteredCoin.market_cap_rank} {<br/>} _<strong> ( {filteredCoin.symbol.toUpperCase()} )</strong> </div>\n                    <div className=\"card__marketcap\">MCap: {filteredCoin.market_cap.toLocaleString(\"en-US\",currencyObj )}</div>\n                    <div className=\"card__circulating__supply\">Circulating Supply: {<br/>} {Number(filteredCoin.circulating_supply).toLocaleString(\"en-US\")} <strong> {filteredCoin.symbol.toUpperCase()}</strong></div>\n                    \n\n                    <img className=\"card__image\" src={filteredCoin.image} alt={filteredCoin.name}/>\n                    <div className=\"card__name\">{filteredCoin.name}</div>\n                    <div className=\"current__price\">  Price</div>\n                    <div className=\"card__price\"> USD:  {\"  \"}{filteredCoin.current_price} \n                    {/* <hr/>  */}\n                    {/* BTC: ₿{filteredCoin.current_price.btc} */}\n                    {/* <hr/>  */}\n                    {/* ETH: {filteredCoin.current_price.eth} */}\n                    {/* <hr/>  */}\n\n                    </div>\n        </div>\n\n\n          ))\n        \n        }\n          </div>\n          \n\n\n\n    return (\n\n\n        <div>\n          {searchBar}\n\n            \n                  <div>\n                  {searchValue.length !== 0 ?\n                      <div>\n                        <div className=\"search__length\">\n                          {searchedCoins.length} matching Results\n                        </div>\n                      {searchIdentifiers}\n                      </div>\n                    :\n                    <div>\n                    </div>\n                  }\n                  </div>  \n      </div>  \n\n      \n    )\n    }\n\nexport default Search;","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/signup/Signup.js",["86","87","88","89"],"import {useState} from 'react'\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\n const Signup = () => {\n  const [open, setOpen] = useState(false);\n\n  //=============================================================================================================//\n  //=============================================================================================================//\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n\n  //=============================================================================================================//\n  //=============================================================================================================//\nconst handleClickSubmit =()=>{\n\n}\n\n\n\n\nreturn (\n    <div>\n\n        <span className=\"signup__button\" onClick={handleClickOpen}>Sign up</span>\n\n      <Dialog open={open} onClose={handleClose} fullWidth={true} maxWidth='xs'  aria-labelledby=\"form-dialog-title\">\n        \n        <DialogContent>\n          <DialogTitle id=\"form-dialog-title\"><h1>Create an Account <br/>Sign Up</h1> </DialogTitle>\n          <DialogContentText>\n          <h3>Already have an account? <a href=\"\">Click here to Log In.</a></h3>\n          </DialogContentText>\n          <hr/>\n\n\n{/* //=============================================================================================================// */}\n{/* //=============================================================================================================// */}\n          <TextField\n            // autoFocus\n            // size='normal'\n            variant='outlined'\n            margin=\"dense\"\n            id=\"username\"\n            label=\"Username\"\n            // type=\"email\"\n            fullWidth\n          />\n\n          {/* <hr/> */}\n          <TextField\n\n            // size='normal'\n            variant='outlined'\n            margin=\"dense\"\n            id=\"email\"\n            label=\"Email Address\"\n            type=\"email\"\n            fullWidth\n          />\n          <br/>\n          <TextField\n            // size='normal'\n            variant='outlined'\n            margin=\"dense\"\n            id=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            fullWidth\n          />\n          <TextField\n            // size='normal'\n            variant='outlined'\n            margin=\"dense\"\n            id=\"confirm password\"\n            label=\"Confirm Password\"\n            type=\"password\"\n            fullWidth\n          />\n          <hr/>\n\n        </DialogContent>\n        <hr/>\n      <hr/>\n      <hr/>\n      <hr/>\n\n{/* //=============================================================================================================// */}\n{/* //=============================================================================================================// */}\n\n        <DialogActions>\n          <button  style={{backgroundColor: 'gold', fontSize:'15px', borderRadius:'7px', padding: '10px'}} onClick={handleClose} >\n           {'<<<< ❌ Sign up Later'}\n          </button>\n          <button style={{backgroundColor: 'gold',  fontSize:'15px', borderRadius:'7px', padding: '10px'}} onClick={handleClose} >\n            Create Account ➕\n          </button>\n        </DialogActions>\n      <hr/>\n      <hr/>\n      <hr/>\n      </Dialog>\n    </div>\n\n\n\n  );\n};\n\nexport default Signup;","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/login/Login.js",["90","91","92","93","94","95","96"],"import {useState} from 'react'\nimport PropTypes from 'prop-types';\nimport axios from 'axios'\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\n\n\n\n//=============================================================================================================//\n//=============================================================================================================//\n\n// async function loginUser(credentials) {\n//   // return fetch('http://127.0.0.1:8080/api/signin', {\n//   return fetch('/api/signin', {\n\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify(credentials)\n//   })\n//     .then(data => data.json())\n    \n//     //  axios.create({\n//     //    baseURL: 'api',\n//     //    timeout: 5000\n//     //  })\n//  }\n\n//=============================================================================================================//\n//=============================================================================================================//\n\n\n\n const Login = () => {\n  const [open, setOpen] = useState(false);\n  const [username, setUserName] = useState();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n\n  //=============================================================================================================//\n  //=============================================================================================================//\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  //=============================================================================================================//\n  //=============================================================================================================//\n\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    // return await loginUser({\n    //   username,\n    //   email,\n    //   password\n    // }\n    // );\n    // setToken(token);\n    // await axios.post('127.0.0.1:8080/api/signin', signin)\n\n  }\n//=============================================================================================================//\n//=============================================================================================================//\n\nreturn (\n    <div>\n\n    <span className=\"login__button\" onClick={handleClickOpen}>Sign In</span>\n \n      <Dialog open={open} onClose={handleClose}  aria-labelledby=\"form-dialog-title\"\n       fullWidth={true} maxWidth='xs'\n      >\n\n\n        <DialogContent>\n          <DialogTitle id=\"form-dialog-title\"><h1> Log In to your Account<br/>Sign In </h1> </DialogTitle>\n          {/* <DialogContentText>\n            <h3>New to Crypto Collection? <a href=\"\">Create an Account here.</a></h3>\n\n          </DialogContentText> */}\n          <hr/>\n          <TextField\n            variant='outlined'\n            margin=\"dense\"\n            id=\"username\"\n            label=\"Username\"\n            type=\"email\"\n            fullWidth\n            onChange={e => setUserName(e.target.value)}\n          />\n\n          <hr/>\n          <TextField\n            variant='outlined'\n            margin=\"dense\"\n            id=\"email\"\n            label=\"Email Address\"\n            type=\"email\"\n            fullWidth\n            onChange={e => setEmail(e.target.value)}\n          />\n          <hr/>\n          <TextField\n            variant='outlined'\n            margin=\"dense\"\n            id=\"password\"\n            label=\"Password\"\n            type=\"email\"\n            fullWidth\n            onChange={e => setPassword(e.target.value)}\n          />\n        \n            <hr/>\n            <DialogContentText>\n            <h3>New to Crypto Collection? <a href=\"\">Create an Account here.</a></h3>\n\n          </DialogContentText>\n\n\n        </DialogContent> \n        <hr/>\n      <hr/>\n\n        \n      <hr/>\n        <DialogActions>\n          <button  style={{backgroundColor: 'gold', fontSize:'15px', borderRadius:'7px', padding: '10px'}} onClick={handleClose} >\n          ❌ Cancel\n          </button>\n          <button style={{backgroundColor: 'gold',  fontSize:'15px', borderRadius:'7px', padding: '10px'}} \n            onClick={handleSubmit} >\n           Login 🔑 🚪\n          </button>\n        </DialogActions>\n      <hr/>\n      <hr/>\n      <hr/>\n      <hr/>\n      <hr/>\n      </Dialog>\n    </div>\n    // </div>\n  );\n};\n\n\n// Login.propTypes = {\n//   setToken: PropTypes.func.isRequired\n// }\n\n\n\n\nexport default Login;","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/MyWatchlist/MyWatchlist.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/myWatchlist/MyWatchlist.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/myCollection/MyCollection.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/navbar/Navbar.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/shop/Shop.js",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":4,"column":42,"nodeType":"103","messageId":"104","endLine":4,"endColumn":48},{"ruleId":"101","severity":1,"message":"105","line":4,"column":50,"nodeType":"103","messageId":"104","endLine":4,"endColumn":54},{"ruleId":"101","severity":1,"message":"106","line":7,"column":8,"nodeType":"103","messageId":"104","endLine":7,"endColumn":14},{"ruleId":"101","severity":1,"message":"107","line":9,"column":8,"nodeType":"103","messageId":"104","endLine":9,"endColumn":14},{"ruleId":"101","severity":1,"message":"108","line":10,"column":8,"nodeType":"103","messageId":"104","endLine":10,"endColumn":13},{"ruleId":"101","severity":1,"message":"109","line":32,"column":22,"nodeType":"103","messageId":"104","endLine":32,"endColumn":35},{"ruleId":"101","severity":1,"message":"110","line":33,"column":24,"nodeType":"103","messageId":"104","endLine":33,"endColumn":39},{"ruleId":"101","severity":1,"message":"111","line":35,"column":10,"nodeType":"103","messageId":"104","endLine":35,"endColumn":22},{"ruleId":"101","severity":1,"message":"112","line":35,"column":24,"nodeType":"103","messageId":"104","endLine":35,"endColumn":39},{"ruleId":"113","severity":1,"message":"114","line":50,"column":4,"nodeType":"115","endLine":50,"endColumn":6,"suggestions":"116"},{"ruleId":"117","severity":1,"message":"118","line":65,"column":31,"nodeType":"119","messageId":"120","endLine":65,"endColumn":33},{"ruleId":"101","severity":1,"message":"121","line":1,"column":10,"nodeType":"103","messageId":"104","endLine":1,"endColumn":18},{"ruleId":"101","severity":1,"message":"122","line":1,"column":20,"nodeType":"103","messageId":"104","endLine":1,"endColumn":29},{"ruleId":"101","severity":1,"message":"123","line":4,"column":8,"nodeType":"103","messageId":"104","endLine":4,"endColumn":26},{"ruleId":"97","replacedBy":"124"},{"ruleId":"99","replacedBy":"125"},{"ruleId":"101","severity":1,"message":"122","line":1,"column":9,"nodeType":"103","messageId":"104","endLine":1,"endColumn":18},{"ruleId":"101","severity":1,"message":"121","line":1,"column":20,"nodeType":"103","messageId":"104","endLine":1,"endColumn":28},{"ruleId":"101","severity":1,"message":"126","line":3,"column":8,"nodeType":"103","messageId":"104","endLine":3,"endColumn":20},{"ruleId":"101","severity":1,"message":"127","line":16,"column":7,"nodeType":"103","messageId":"104","endLine":16,"endColumn":15},{"ruleId":"101","severity":1,"message":"128","line":17,"column":7,"nodeType":"103","messageId":"104","endLine":17,"endColumn":17},{"ruleId":"129","severity":1,"message":"130","line":19,"column":1,"nodeType":"131","messageId":"132","endLine":19,"endColumn":117},{"ruleId":"129","severity":1,"message":"130","line":20,"column":1,"nodeType":"131","messageId":"132","endLine":20,"endColumn":117},{"ruleId":"117","severity":1,"message":"118","line":33,"column":30,"nodeType":"119","messageId":"120","endLine":33,"endColumn":32},{"ruleId":"129","severity":1,"message":"130","line":41,"column":1,"nodeType":"131","messageId":"132","endLine":41,"endColumn":117},{"ruleId":"129","severity":1,"message":"130","line":42,"column":1,"nodeType":"131","messageId":"132","endLine":42,"endColumn":117},{"ruleId":"117","severity":1,"message":"133","line":55,"column":30,"nodeType":"119","messageId":"134","endLine":55,"endColumn":32},{"ruleId":"101","severity":1,"message":"135","line":2,"column":8,"nodeType":"103","messageId":"104","endLine":2,"endColumn":13},{"ruleId":"101","severity":1,"message":"136","line":3,"column":8,"nodeType":"103","messageId":"104","endLine":3,"endColumn":14},{"ruleId":"101","severity":1,"message":"137","line":29,"column":7,"nodeType":"103","messageId":"104","endLine":29,"endColumn":24},{"ruleId":"138","severity":1,"message":"139","line":46,"column":40,"nodeType":"140","endLine":46,"endColumn":51},{"ruleId":"101","severity":1,"message":"141","line":2,"column":8,"nodeType":"103","messageId":"104","endLine":2,"endColumn":17},{"ruleId":"101","severity":1,"message":"135","line":3,"column":8,"nodeType":"103","messageId":"104","endLine":3,"endColumn":13},{"ruleId":"101","severity":1,"message":"136","line":4,"column":8,"nodeType":"103","messageId":"104","endLine":4,"endColumn":14},{"ruleId":"101","severity":1,"message":"142","line":44,"column":10,"nodeType":"103","messageId":"104","endLine":44,"endColumn":18},{"ruleId":"101","severity":1,"message":"143","line":45,"column":10,"nodeType":"103","messageId":"104","endLine":45,"endColumn":15},{"ruleId":"101","severity":1,"message":"144","line":46,"column":10,"nodeType":"103","messageId":"104","endLine":46,"endColumn":18},{"ruleId":"138","severity":1,"message":"139","line":128,"column":43,"nodeType":"140","endLine":128,"endColumn":54},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Search' is defined but never used.","'Signup' is defined but never used.","'Login' is defined but never used.","'setPageNumber' is assigned a value but never used.","'setCoinsPerPage' is assigned a value but never used.","'currencyType' is assigned a value but never used.","'setCurrencyType' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCryptoData'. Either include it or remove the dependency array.","ArrayExpression",["147"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useState' is defined but never used.","'useEffect' is defined but never used.","'FavoriteBorderIcon' is defined but never used.",["145"],["146"],"'CoinGeckoApi' is defined but never used.","'nameData' is assigned a value but never used.","'symbolData' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'axios' is defined but never used.","'Button' is defined but never used.","'handleClickSubmit' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'PropTypes' is defined but never used.","'username' is assigned a value but never used.","'email' is assigned a value but never used.","'password' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},"Update the dependencies array to be: [getCryptoData]",{"range":"150","text":"151"},[1751,1753],"[getCryptoData]"]