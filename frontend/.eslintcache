[{"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/index.js":"1","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/App.js":"2","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/coinGeckoAPI/coinGeckoData.js":"3","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/pagination/Pagination.js":"4","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/search/Search.js":"5","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/signup/Signup.js":"6"},{"size":464,"mtime":1608926693434,"results":"7","hashOfConfig":"8"},{"size":3717,"mtime":1613081313972,"results":"9","hashOfConfig":"8"},{"size":3906,"mtime":1613076968271,"results":"10","hashOfConfig":"8"},{"size":716,"mtime":1613076484241,"results":"11","hashOfConfig":"8"},{"size":5506,"mtime":1613077219430,"results":"12","hashOfConfig":"8"},{"size":3251,"mtime":1613087588526,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"pv58m6",{"filePath":"17","messages":"18","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"16"},"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/index.js",[],["32","33"],"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/App.js",["34","35","36","37","38","39","40"],"\nimport {useState, useEffect} from 'react'\nimport CoinGeckoApi from './components/coinGeckoAPI/coinGeckoData'\nimport Search from './components/search/Search'\nimport Pagination from './components/pagination/Pagination';\nimport Signup from './components/signup/Signup'\n\nimport './App.css';\nconst CoinGecko = require('coingecko-api');\n\n\n\n\n//=============================================================================================================//\n//=============================================================================================================//\nconst CoinGeckoClient = new CoinGecko();\n\n\n\nfunction App() {\n\n  const [loading, setLoading] = useState(false);\n  const [coinResults, setCoinResults] = useState([]);\n  const [searchValue, setSearchValue] = useState('');\n  const [pageNumber, setPageNumber] = useState(1);\n  const [coinsPerPage, setCoinsPerPage] = useState(100)\n  const [allCoinINS, setAllCoinINS] = useState([])\n  const [currencyType, setCurrencyType] = useState('usd')\n  const [searchedCoins, setSearchedCoins] = useState([])\n\n\n\n//=============================================================================================================//\n//=============================================================================================================//\nuseEffect(()=>{\n\n  getCryptoData()\n\n\n  console.log(coinResults)\n}, [])  \n\n\nconst getCryptoData = async(pageNumber) => {\n  setLoading(true);\n  \n  //allows maximum 250 assets per use\n  let data = await CoinGeckoClient.coins.all({per_page: coinsPerPage, page: pageNumber});\n\n  //get all coin id's to use as search reference of available coins in database\n  //gets all id's, name and symbols of all coins\n  let allCoinsINS = await CoinGeckoClient.coins.list()\n\n  let coinCardIds =[]\n\n  allCoinsINS.data.map((value)=>{\n    // console.log(value.id)\n    coinCardIds.push(value.id)\n    \n  })\n\n  setCoinResults(data.data)\n  setAllCoinINS(allCoinsINS.data)\n\n  setLoading(false)\n\n};\n\n\n\n//=============================================================================================================//\n//=============================================================================================================//\n//get current posts per page\n// const indexOfLastPost = pageNumber *  coinsPerPage;\n// const indexOfFirstPost = indexOfLastPost -  coinsPerPage;\n// const currentCoins = coinResults.slice(indexOfFirstPost,indexOfLastPost)\n\n\n//Change page\nconst paginate = async (pageNumber)=>{\n  getCryptoData(pageNumber)\n\n\n}\n//=============================================================================================================//\n//=============================================================================================================//\n\n  return (\n    <div className=\"App\">\n      <Signup/>\n      <div className=\"header\">\n\n        {/* <p className='header__logo'> COIN-CARD COLLECTION <br/>CRYPTOCURRENCY</p>  */}\n        <p className='header__logo' > DIGI-CRYPTO <br/>COLLECTION</p> \n\n     \n      </div>\n\n        <CoinGeckoApi coinResults={coinResults} loading={loading} \n          setSearchValue={setSearchValue}\n          searchValue={searchValue}\n          allCoinINS={allCoinINS}\n          setCoinResults={setCoinResults}\n          setSearchedCoins={setSearchedCoins}\n          searchedCoins={searchedCoins}\n          coinsPerPage={coinsPerPage}\n          pageNumber={pageNumber}\n        />\n        {/* <CoinGeckoApi coinResults={currentCoins} loading={loading} /> */}\n        {/* <SearchResults /> */}\n        <Pagination \n          coinsPerPage={coinsPerPage} \n          totalCoins={allCoinINS.length} \n          paginate={paginate}\n          pageNumber={pageNumber}\n        />\n\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/coinGeckoAPI/coinGeckoData.js",["41","42","43"],"import { useState, useEffect } from \"react\";\nimport \"./coinGeckoData.css\";\nimport Search from '../search/Search'\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\n\n\n\nconst CoinGeckoApi = ({coinResults, loading, setCoinResults, searchValue,setSearchValue, allCoinINS, setSearchedCoins, searchedCoins, coinsPerPage, pageNumber}) => {\n    if (loading){\n        return <div className=\"loader\">Loading...</div>\n    }\n\n    //=============================================================================================================//\n    //=============================================================================================================//\n\n    const currencyObj = {\n        style: \"currency\",\n        currency: \"usd\",\n        // currencyDisplay: 'code'\n    }\n\nconsole.log(coinResults)\nconsole.log(searchedCoins)\nconsole.log(searchValue)\nconsole.log(searchValue.length)\n\n//=============================================================================================================//\n//=============================================================================================================//\n// setCoinResults(coinResults)\n    return (\n\n\n        \n        <div>\n\n            <Search \n                coinResults={coinResults}\n                setSearchValue={setSearchValue}\n                searchValue={searchValue}\n                allCoinINS={allCoinINS}\n                setCoinResults={setCoinResults}\n                setSearchedCoins={setSearchedCoins}\n                searchedCoins={searchedCoins}\n                />\n             {/* </div> */}\n\n            {searchValue.length === 0 ?        \n                \n                \n                <div className=\"coin__info\">\n            {/* <div>  \n            <div> */}\n            {/* <div className=\"search__length\"> showing Top {coinsPerPage} of Page {pageNumber} </div>  */}\n                    {coinResults.map((coinInfo) => (\n                    <div \n                    key={coinInfo.id} \n                    className=\"coin__card\"        \n                    >\n                        {/* <div className=\"favorite__icon\"> {FavoriteBorderIcon}</div> */}\n                        <div className=\"card__rank\">{\"_\"}Rank: #{coinInfo.market_data.market_cap_rank} {<br/>} <strong> ( {coinInfo.symbol.toUpperCase()} )</strong> </div>\n                        <div className=\"card__marketcap\"> MCap: {coinInfo.market_data.market_cap.usd.toLocaleString(\"en-US\",currencyObj)}</div>\n                        <div className=\"card__circulating__supply\">Circulating Supply:{<br/>} {Number(coinInfo.market_data.circulating_supply).toLocaleString(\"en-US\")} <strong> {coinInfo.symbol.toUpperCase()}</strong></div>\n                        \n                        {/* <div className=\"card__marketcap\">MCap: {coinInfo.market_data.market_cap.usd.toLocaleString(\"en-US\",currencyObj)}</div> */}\n                        <img className=\"card__image\" src={coinInfo.image.large} alt={coinInfo.name}/>\n                        <div className=\"card__name\">{coinInfo.name}</div>\n                        <div className=\"current__price\">  Price</div>\n                            <div className=\"card__price\"> USD:  {\"  \"}{coinInfo.market_data.current_price.usd.toLocaleString(\"en-US\",currencyObj)} \n                            <hr/> \n                            BTC: â‚¿{coinInfo.market_data.current_price.btc}\n                            <hr/> \n                            ETH: {coinInfo.market_data.current_price.eth}\n                            <hr/>    \n                            </div>      \n                    \n                    \n                    </div>\n                    \n\n                    \n                    ))}\n                </div>\n                    :\n                    \n                    <div>\n        \n\n            </div>\n\n/* </div> */\n\n            }   \n            </div>\n\n    )\n\n}\n\nexport default CoinGeckoApi;\n","/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/pagination/Pagination.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/search/Search.js",["44","45","46","47","48","49","50"],"import {useEffect, useState} from 'react'\nimport './Search.css'\nimport CoinGeckoApi from '../coinGeckoAPI/coinGeckoData'\nconst CoinGecko = require('coingecko-api');\n\n\n\n\n\n\n// func()\nconst Search =  ({ searchValue, setSearchValue, setCoinResults, coinResults, loading, allCoinINS, currencyType, setCurrencyType, setSearchedCoins, searchedCoins}) => {\n\n\nconst idData = []\nconst nameData = []\nconst symbolData = []\n\n\n\n\n    const handleSearchInput =  async(inputValue)=>{\n    \n\n      setSearchValue(inputValue)\n      // setCoinResults(coinResults)\n      console.log(inputValue)\n\n\n      // const getEach =\n        allCoinINS.map(value =>{\n    \n        idData.push(value.id)\n        // nameData.push(value.name)\n        // symbolData.push(value.symbol)\n        \n\n        })\n\n\n        const filteredSearch = idData.filter(value => value.includes(inputValue))\n        // console.log(filteredSearch)\n        const CoinGeckoClient = new CoinGecko();\n\n        let market =  await CoinGeckoClient.coins.markets({ vs_currency: currencyType, ids: filteredSearch})\n        // console.log(market)\n\n        \n        const filteredSearchArray =[]\n        \n      market.data.map((value)=>{\n\n        if(value.market_cap === null){\n          let acceptedCoin = value\n          \n    \n          return acceptedCoin\n\n        }\n\n            \n            let coinCard = {\n              id: value.id,\n              name: value.name,\n              symbol: value.symbol,\n              market_cap_rank:value.market_cap_rank,\n              market_cap: value.market_cap,\n              circulating_supply: value.circulating_supply,\n              image: value.image,\n              current_price: value.current_price\n\n            }\n            \n            \n            filteredSearchArray.push(coinCard)\n\n          \n        })\n        console.log(filteredSearchArray)\n        setSearchedCoins(filteredSearchArray)\n        // setCoinResults(filteredSearchArray)\n        \n      }\n  \n    //  setCoinResults(coinResults)\n      //  console.log(acceptedCoin)\n      // }\n      // )/\n\n\n    \n\n      const searchBar = \n      <div className=\"search__element\">\n      <input \n          className=\"search__input\"\n          type=\"text\"\n          placeholder=\"Search cryptocurrencies\"\n          value={searchValue}\n          onChange={(e)=> handleSearchInput(e.target.value)}\n          />\n      <button \n        className=\"search__button\"\n        // onClick={handleSearchButton}\n        >Search\n      </button>    \n      </div>\n\n    \n\n    const currencyObj = {\n      style: \"currency\",\n      currency: \"usd\",\n      // currencyDisplay: 'code'\n  }\n\n        const searchIdentifiers =  \n        \n\n        <div className=\"coin__info\">\n\n        {searchedCoins.filter(coinInfo =>\n\n          coinInfo.id.includes(searchValue) ||\n            coinInfo.id.toUpperCase().includes(searchValue)\n          || \n          coinInfo.symbol.includes(searchValue) || coinInfo.symbol.toUpperCase().includes(searchValue)\n          ||\n          coinInfo.name.includes(searchValue) || coinInfo.name.toUpperCase().includes(searchValue))\n          .map(filteredCoin=>(\n            <div \n            key={filteredCoin.id} \n            className=\"coin__card\"        \n        >\n            {/* <div className=\"card__rank\">Rank: #{filteredCoin.market_data.market_cap_rank} {<br/>}( {filteredCoin.symbol.toUpperCase()} ) </div>\n            <div className=\"card__marketcap\">{filteredCoin.market_data.market_cap.usd.toLocaleString(\"en-US\")}</div>\n            <img className=\"card__image\" src={filteredCoin.image.large} alt={filteredCoin.name}/>\n            <div className=\"card__name\">{filteredCoin.name}</div>\n            <div className=\"card__price\"> ${filteredCoin.market_data.current_price.usd}</div> */}\n\n                    <div className=\"card__rank\">{\"_ \"}Rank: #{filteredCoin.market_cap_rank} {<br/>} _<strong> ( {filteredCoin.symbol.toUpperCase()} )</strong> </div>\n                    <div className=\"card__marketcap\">MCap: {filteredCoin.market_cap.toLocaleString(\"en-US\",currencyObj )}</div>\n                    <div className=\"card__circulating__supply\">Circulating Supply: {<br/>} {Number(filteredCoin.circulating_supply).toLocaleString(\"en-US\")} <strong> {filteredCoin.symbol.toUpperCase()}</strong></div>\n                    \n\n                    <img className=\"card__image\" src={filteredCoin.image} alt={filteredCoin.name}/>\n                    <div className=\"card__name\">{filteredCoin.name}</div>\n                    <div className=\"current__price\">  Price</div>\n                    <div className=\"card__price\"> USD:  {\"  \"}{filteredCoin.current_price} \n                    {/* <hr/>  */}\n                    {/* BTC: â‚¿{filteredCoin.current_price.btc} */}\n                    {/* <hr/>  */}\n                    {/* ETH: {filteredCoin.current_price.eth} */}\n                    {/* <hr/>  */}\n\n                    </div>\n        </div>\n\n\n          ))\n        \n        }\n          </div>\n          \n\n\n\n    return (\n\n\n        <div>\n          {searchBar}\n\n            \n                  <div>\n                  {searchValue.length !== 0 ?\n                      <div>\n                        <div className=\"search__length\">\n                          {searchedCoins.length} matching Results\n                        </div>\n                      {searchIdentifiers}\n                      </div>\n                    :\n                    <div>\n                    </div>\n                  }\n                  </div>  \n      </div>  \n\n      \n    )\n    }\n\nexport default Search;",["51","52"],"/Users/danieljames/CodeImmersives-WebDev/Projects/coin-collection-cryptocurrency/frontend/src/components/signup/Signup.js",["53","54"],"import {useState} from 'react'\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\n const Signup = () => {\n  const [open, setOpen] = useState(false);\n\n  //=============================================================================================================//\n  //=============================================================================================================//\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  //=============================================================================================================//\n  //=============================================================================================================//\n\n//   return (\n//     <div>\n//       <nav className=\"header__navigator\">\n//         <div className=\"registration__buttons\">\n//           <a className=\"login__button\" href={handleClickOpen}>Login</a>\n//           <a className=\"signup__button\">Register</a>\n//         </div>\n//       </nav>\n\n//       <Dialog\n//         open={open}\n//         onClose={handleClose}\n//         aria-labelledby=\"form-dialog-title\"\n//       ></Dialog>\n//     </div>\n//   );\n\n\n\n\nreturn (\n    <div>\n    <nav className=\"header__navigator\">\n        <div className=\"registration__buttons\">\n        <span className=\"login__button\" onClick={handleClickOpen}>Login</span>\n\n        <span className=\"signup__button\" onClick={handleClickOpen}>Sign up</span>\n        </div>\n    </nav>\n \n      <Dialog open={open} onClose={handleClose}  fullWidth='true' maxWidth='xs' aria-labelledby=\"form-dialog-title\">\n        {/* <DialogTitle id=\"form-dialog-title\">Create an Account</DialogTitle> */}\n        <h1> Create an Account</h1>\n        <DialogContent>\n          <DialogContentText>\n           Already have an account? Log in.\n          </DialogContentText>\n          <TextField\n            autoFocus\n            size='normal'\n            variant='outlined'\n            margin=\"dense\"\n            id=\"username\"\n            label=\"Username\"\n            type=\"email\"\n            fullWidth\n          />\n          <TextField\n\n            size='normal'\n            variant='outlined'\n            margin=\"dense\"\n            id=\"email\"\n            label=\"Email Address\"\n            type=\"email\"\n            fullWidth\n          />\n          <TextField\n            size='normal'\n            variant='outlined'\n            margin=\"dense\"\n            id=\"password\"\n            label=\"Password\"\n            type=\"email\"\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <button  style={{backgroundColor: 'gold'}} onClick={handleClose} >\n            Cancel\n          </button>\n          <button style={{backgroundColor: 'gold'}} onClick={handleClose} >\n            Create Account\n          </button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default Signup;",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":4,"column":8,"nodeType":"61","messageId":"62","endLine":4,"endColumn":14},{"ruleId":"59","severity":1,"message":"63","line":25,"column":22,"nodeType":"61","messageId":"62","endLine":25,"endColumn":35},{"ruleId":"59","severity":1,"message":"64","line":26,"column":24,"nodeType":"61","messageId":"62","endLine":26,"endColumn":39},{"ruleId":"59","severity":1,"message":"65","line":28,"column":10,"nodeType":"61","messageId":"62","endLine":28,"endColumn":22},{"ruleId":"59","severity":1,"message":"66","line":28,"column":24,"nodeType":"61","messageId":"62","endLine":28,"endColumn":39},{"ruleId":"67","severity":1,"message":"68","line":41,"column":4,"nodeType":"69","endLine":41,"endColumn":6,"suggestions":"70"},{"ruleId":"71","severity":1,"message":"72","line":56,"column":31,"nodeType":"73","messageId":"74","endLine":56,"endColumn":33},{"ruleId":"59","severity":1,"message":"75","line":1,"column":10,"nodeType":"61","messageId":"62","endLine":1,"endColumn":18},{"ruleId":"59","severity":1,"message":"76","line":1,"column":20,"nodeType":"61","messageId":"62","endLine":1,"endColumn":29},{"ruleId":"59","severity":1,"message":"77","line":4,"column":8,"nodeType":"61","messageId":"62","endLine":4,"endColumn":26},{"ruleId":"59","severity":1,"message":"76","line":1,"column":9,"nodeType":"61","messageId":"62","endLine":1,"endColumn":18},{"ruleId":"59","severity":1,"message":"75","line":1,"column":20,"nodeType":"61","messageId":"62","endLine":1,"endColumn":28},{"ruleId":"59","severity":1,"message":"78","line":3,"column":8,"nodeType":"61","messageId":"62","endLine":3,"endColumn":20},{"ruleId":"59","severity":1,"message":"79","line":16,"column":7,"nodeType":"61","messageId":"62","endLine":16,"endColumn":15},{"ruleId":"59","severity":1,"message":"80","line":17,"column":7,"nodeType":"61","messageId":"62","endLine":17,"endColumn":17},{"ruleId":"71","severity":1,"message":"72","line":31,"column":30,"nodeType":"73","messageId":"74","endLine":31,"endColumn":32},{"ruleId":"71","severity":1,"message":"81","line":51,"column":30,"nodeType":"73","messageId":"82","endLine":51,"endColumn":32},{"ruleId":"55","replacedBy":"83"},{"ruleId":"57","replacedBy":"84"},{"ruleId":"59","severity":1,"message":"85","line":2,"column":8,"nodeType":"61","messageId":"62","endLine":2,"endColumn":14},{"ruleId":"59","severity":1,"message":"86","line":8,"column":8,"nodeType":"61","messageId":"62","endLine":8,"endColumn":19},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"no-unused-vars","'Search' is defined but never used.","Identifier","unusedVar","'setPageNumber' is assigned a value but never used.","'setCoinsPerPage' is assigned a value but never used.","'currencyType' is assigned a value but never used.","'setCurrencyType' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'coinResults' and 'getCryptoData'. Either include them or remove the dependency array.","ArrayExpression",["89"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useState' is defined but never used.","'useEffect' is defined but never used.","'FavoriteBorderIcon' is defined but never used.","'CoinGeckoApi' is defined but never used.","'nameData' is assigned a value but never used.","'symbolData' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd",["87"],["88"],"'Button' is defined but never used.","'DialogTitle' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},"Update the dependencies array to be: [coinResults, getCryptoData]",{"range":"92","text":"93"},[1354,1356],"[coinResults, getCryptoData]"]